import os
import json
import logging
import random
import aiohttp
import asyncio
import traceback
from typing import Optional, List, Dict
from datetime import datetime
from aiogram import Bot

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Monica AI
MONICA_MODELS = {
    "gpt-4o": {
        "name": "GPT-4 Optimized",
        "description": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4",
        "max_tokens": "8,000"
    },
    "claude-3-5-sonnet-20241022": {
        "name": "Claude 3.5 Sonnet", 
        "description": "–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
        "max_tokens": "200,000"
    },
    "claude-3-haiku-20240307": {
        "name": "Claude 3 Haiku",
        "description": "–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å Claude 3",
        "max_tokens": "4,000"
    },
    "o1-mini": {
        "name": "O1 Mini",
        "description": "–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å",
        "max_tokens": "2,000"
    }
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenRouter
OPENROUTER_MODELS = {
    "anthropic/claude-3-7-sonnet": {
        "name": "Claude 3.7 Sonnet",
        "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        "max_tokens": "200,000"
    },
    "anthropic/claude-3-7-sonnet:thinking": {
        "name": "Claude 3.7 Sonnet (Thinking)",
        "description": "–í–µ—Ä—Å–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á",
        "max_tokens": "200,000"
    },
    "anthropic/claude-3-7-sonnet:beta": {
        "name": "Claude 3.7 Sonnet (Beta)",
        "description": "–í–µ—Ä—Å–∏—è –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º",
        "max_tokens": "200,000"
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_models: Dict[int, str] = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–¥–µ–ª–µ–π (monica –∏–ª–∏ openrouter)
user_model_services: Dict[int, str] = {}

def get_available_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ –º–æ–¥–µ–ª–µ–π Monica AI –∏ OpenRouter
    all_models = {**MONICA_MODELS, **OPENROUTER_MODELS}
    return all_models

def get_user_model(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return user_models.get(user_id, "gpt-4o")

def get_user_model_service(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (monica –∏–ª–∏ openrouter)"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model = get_user_model(user_id)
    if model in MONICA_MODELS:
        return "monica"
    elif model in OPENROUTER_MODELS:
        return "openrouter"
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Monica AI
    return "monica"

async def try_gpt_request(prompt: str, posts_text: str, user_id: int, bot: Bot, user_data: dict):
    """–ó–∞–ø—Ä–æ—Å –∫ Monica AI API –∏–ª–∏ OpenRouter API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    service = get_user_model_service(user_id)
    
    if service == "monica":
        return await try_monica_request(prompt, posts_text, user_id, bot, user_data)
    elif service == "openrouter":
        return await try_openrouter_request(prompt, posts_text, user_id, bot, user_data)
    else:
        error_msg = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ–ª–∏: {service}"
        logger.error(error_msg)
        raise Exception(error_msg)

async def try_monica_request(prompt: str, posts_text: str, user_id: int, bot: Bot, user_data: dict):
    """–ó–∞–ø—Ä–æ—Å –∫ Monica AI API"""
    status_message = None
    try:
        text_length = len(posts_text)
        selected_model = get_user_model(user_id)
        model_info = MONICA_MODELS[selected_model]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        status_message = await bot.send_message(
            user_id,
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...\n"
            f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º: Monica AI - {model_info['name']}"
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á –∏–∑ .env
        api_key = os.getenv("MONICA_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á Monica –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Monica AI
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            {
                "role": "system",
                "content": [
                    {
                        "type": "text",
                        "text": "–¢—ã –º–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –¢—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
                    }
                ]
            },
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": f"{prompt}\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{posts_text}"
                    }
                ]
            }
        ]
        
        data = {
            "model": selected_model,
            "messages": messages
        }
        
        if status_message:
            await status_message.edit_text(
                f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Monica AI...\n"
                f"–ú–æ–¥–µ–ª—å: {model_info['name']}\n"
                f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Monica API, –º–æ–¥–µ–ª—å: {selected_model}, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length}")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://openapi.monica.im/v1/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=None  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
                ) as response:
                    response_text = await response.text()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Monica API, —Å—Ç–∞—Ç—É—Å: {response.status}")
                    
                    if response.status == 200:
                        try:
                            result = json.loads(response_text)
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                            response_text = result['choices'][0]['message']['content']
                            if status_message:
                                await status_message.delete()
                            return response_text
                        except (json.JSONDecodeError, KeyError, IndexError) as e:
                            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Monica AI: {str(e)}, –æ—Ç–≤–µ—Ç: {response_text[:200]}..."
                            logger.error(error_msg)
                            if status_message:
                                await status_message.edit_text(error_msg)
                            raise Exception(error_msg)
                    else:
                        error_msg = f"‚ùå –û—à–∏–±–∫–∞ Monica API ({response.status}): {response_text[:200]}..."
                        logger.error(error_msg)
                        if status_message:
                            await status_message.edit_text(error_msg)
                        raise Exception(error_msg)
        except asyncio.TimeoutError:
            error_msg = f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Monica AI. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        except aiohttp.ClientError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Monica AI: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
                    
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Monica AI: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
        logger.error(error_msg)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        
        if status_message:
            await status_message.edit_text(error_msg)
        raise Exception(error_msg)

async def try_openrouter_request(prompt: str, posts_text: str, user_id: int, bot: Bot, user_data: dict):
    """–ó–∞–ø—Ä–æ—Å –∫ OpenRouter API"""
    status_message = None
    try:
        text_length = len(posts_text)
        selected_model = get_user_model(user_id)
        model_info = OPENROUTER_MODELS[selected_model]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        status_message = await bot.send_message(
            user_id,
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...\n"
            f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º: OpenRouter - {model_info['name']}"
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á –∏–∑ .env
        api_key = os.getenv("OPENROUTER_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}",
            "HTTP-Referer": "https://t.me",  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
            "X-Title": "Telegram Bot Analyzer"  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            {
                "role": "system",
                "content": "–¢—ã –º–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –¢—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
            },
            {
                "role": "user",
                "content": f"{prompt}\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{posts_text}"
            }
        ]
        
        data = {
            "model": selected_model,
            "messages": messages
        }
        
        if status_message:
            await status_message.edit_text(
                f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenRouter...\n"
                f"–ú–æ–¥–µ–ª—å: {model_info['name']}\n"
                f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API, –º–æ–¥–µ–ª—å: {selected_model}, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length}")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=None  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
                ) as response:
                    response_text = await response.text()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API, —Å—Ç–∞—Ç—É—Å: {response.status}")
                    
                    if response.status == 200:
                        try:
                            result = json.loads(response_text)
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                            response_text = result['choices'][0]['message']['content']
                            if status_message:
                                await status_message.delete()
                            return response_text
                        except (json.JSONDecodeError, KeyError, IndexError) as e:
                            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: {str(e)}, –æ—Ç–≤–µ—Ç: {response_text[:200]}..."
                            logger.error(error_msg)
                            if status_message:
                                await status_message.edit_text(error_msg)
                            raise Exception(error_msg)
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                        error_data = json.loads(response_text) if response_text else {}
                        error_message = error_data.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        error_code = error_data.get('error', {}).get('code', response.status)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–¥–∞
                        if error_code == 400:
                            error_msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        elif error_code == 401:
                            if "No auth credentials found" in error_message:
                                error_msg = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
                            else:
                                error_msg = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ API –∫–ª—é—á —É—Å—Ç–∞—Ä–µ–ª."
                        elif error_code == 403:
                            error_msg = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é."
                        elif error_code == 408:
                            error_msg = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. OpenRouter –ø—Ä–µ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
                        elif error_code == 429:
                            error_msg = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ API –∏–∑ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."
                        elif error_code == 502:
                            error_msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
                        elif error_code == 503:
                            error_msg = "‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ò–ò –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ OpenRouter."
                        else:
                            error_msg = f"‚ùå –û—à–∏–±–∫–∞ OpenRouter API ({error_code}): {error_message}"
                        
                        logger.error(f"{error_msg}\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text[:200]}...")
                        if status_message:
                            await status_message.edit_text(error_msg)
                        raise Exception(error_msg)
                        
        except asyncio.TimeoutError:
            error_msg = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        except aiohttp.ClientError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenRouter: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
                    
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
        logger.error(error_msg)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        
        if status_message:
            await status_message.edit_text(error_msg)
        raise Exception(error_msg)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = [
    'try_gpt_request',
    'get_available_models',
    'get_user_model',
    'user_models',
    'MONICA_MODELS',
    'OPENROUTER_MODELS',
    'get_user_model_service'
]